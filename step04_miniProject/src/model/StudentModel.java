package model;

import java.time.LocalTime;
import model.Student.Student;

public class StudentModel {
	
	private static Student[] allData = new Student[10];
	
	static {
		allData[0] = new Student("박현민", LocalTime.of(8,50), LocalTime.of(18,10)); //출석
		allData[1] = new Student("김종성", LocalTime.of(8,51), LocalTime.of(18,01)); //출석
		allData[2] = new Student("송시찬", LocalTime.of(9,05), LocalTime.of(18,10)); //지각
		allData[3] = new Student("조현희", LocalTime.of(9,10), LocalTime.of(16,40)); //조퇴
		allData[4] = new Student("김동성", LocalTime.of(8,50), LocalTime.of(16,50)); //출석
		allData[5] = new Student("변영인", LocalTime.of(8,10), LocalTime.of(18,10)); //출석
		allData[6] = new Student("강사님", LocalTime.of(0,0), LocalTime.of(0,0));    //결석
		allData[7] = new Student("김진휘", LocalTime.of(0,0), LocalTime.of(18,10));  //조사필요
		allData[8] = new Student("남세영", LocalTime.of(8,57), LocalTime.of(18,10)); //출석
		allData[9] = new Student("최성국", LocalTime.of(9,10), LocalTime.of(0,0));   //조사필요
	}
	
	
	//출석(9시 이전 / 18시 이후)
	public static String attend() {
		Student v = null;
		String name = null;
		for(int i = 0 ; i < allData.length ; i++) {
			v = allData[i];
			if(v.getIntime().isBefore(LocalTime.of(9,0)) && v.getOuttime().isAfter(LocalTime.of(18,0))
					&& v.getIntime() != null && v.getOuttime() != null) {
				name = v.getName();
				System.out.println(name);
			}
			
		} 
	return name;
	}

	public static String late() {
		Student v = null;
		String name = null;
		for(int i = 0 ; i < allData.length ; i++) {
			v = allData[i];
			if(v.getIntime().isAfter(LocalTime.of(9,0)) && v.getOuttime().isAfter(LocalTime.of(18,0))
				&& v.getIntime() != null && v.getOuttime() !=null	) {
				name = v.getName();
				System.out.println(name);
			}
			
		} 
	return name;
	}
	
	//조퇴(값존재 / 18시 이전)
	public static String early() {
		Student v = null;
		String name = null;
		for(int i = 0 ; i < allData.length ; i++) {
			v = allData[i];
			if(v.getOuttime().isBefore(LocalTime.of(18,0))
				&& v.getIntime() != null && v.getOuttime() !=null) {
				name = v.getName();
				System.out.println(name);
			}
			
		} 
	return name;
	}
	
	//결석(both null)
	public static String absent() {
		Student v = null;
		String name = null;
		for(int i = 0 ; i < allData.length ; i++) {
			v = allData[i];
			if(v.getIntime() == LocalTime.of(0,0) && v.getOuttime() == LocalTime.of(0,0)) {
				name = v.getName();
				System.out.println(name);
			}
			
		} 
	return name;
	}
	
	//조사필요( null && 값존재  or 값존재 && null)
	public static String required() {
		Student v = null;
		String name = null;
		for(int i = 0 ; i < allData.length ; i++) {
			v = allData[i];
			if(v.getIntime() == LocalTime.of(0,0) && v.getOuttime() != LocalTime.of(0,0) 
			 ||v.getIntime() != LocalTime.of(0,0) && v.getOuttime() == LocalTime.of(0,0)	) {
				name = v.getName();
				System.out.println(name);
			}
			
		} 
	return name;
	}
}

	
